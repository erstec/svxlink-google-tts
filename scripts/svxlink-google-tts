#!/bin/bash
#
# Script to create SvxLink compatible sound files using
# the Google Cloud Text to Speech API
#
# Copyright (C) 2018-2020 Ken Koster - N7IPB
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
shopt -s nullglob

# Where do we start from - everything else is relative to here
#HOME_DIR=$(pwd)
HOME_DIR="."

# Default values
#
SRC_DIR="English"
SCRIPT_DIR="$HOME_DIR/scripts"
DESTINATION="sound"
# Default config file
CONFIG_FILE="google_tts.cfg"

create_virt_env() {
    virtualenv -q env
    source env/bin/activate
    pip -q install -r $SCRIPT_DIR/requirements.txt
    export GOOGLE_APPLICATION_CREDENTIALS=~/.google/key.json
}

list_voices() {
    python $SCRIPT_DIR/list_voices.py
}

# Print a usage message and then exit
print_usage_and_exit()
{
    echo ""	
    echo "Usage: svxlink-google-tts.sh [-L] [-T <source text dir>] [-D <destination dir>] <config file> "
    echo
    echo "  -L -- List available Voices"
    echo "  -T -- Direcory of text files to convert"
    echo "  -D -- Destination Direcory for sound files"
    exit 1
}


# Create a python virtual environment for the python code we call
create_virt_env 

while getopts ":D:T:L" opt; do
    case ${opt} in
    	T)
      		SRC_DIR="$OPTARG"
		;;
        D)
		DESTINATION="$OPTARG"
		;;
    	L)
	   	list_voices ;
		exit 1
		;;
    	:)
      		echo "Errpr: -${OPTARG} requires an argument" 1>&2
		exit 1	
      		;;
    	*)
		print_usage_and_exit;
		;;
  esac
done
shift $((OPTIND -1))

#
DEST_DIR="$HOME_DIR/$DESTINATION"

if [ $# -eq 1 ]; then
    CONFIG_FILE=$1
fi

# Check if the config file exists and source it
if [ ! -r "$CONFIG_FILE" ]; then
    echo -e "\n*** ERROR: Configuration file $CONFIG_FILE is missing"
    print_usage_and_exit
fi

. "$CONFIG_FILE"

# Check if the SUBDIRS config variable is set
if [ -z "$SUBDIRS" ]; then
    echo -e "\n*** ERROR: Configuration variable SUBDIRS not set."
    print_usage_and_exit
fi
# Loop through each subdirectory specified in SUBDIRS
for subdir in $SUBDIRS; do
    echo "Entering $SRC_DIR/$subdir"
    echo "subdir $subdir"
    pwd
    for file in $SRC_DIR/$subdir/*.txt; do
        echo -e "\t$file"
        tts_text=$(cat $file)
        filename=$(basename "$file")
        filename="${filename%.*}"
        # Call synthesize_text to produce the sound file
        python $SCRIPT_DIR/synthesize_text.py --$TEXTTYPE "$tts_text" --lang $LANGUAGE --name $NAME --gender $GENDER --rate $RATE --pitch  $PITCH --srate $SAMPLERATE --ofilename $SRC_DIR/$subdir/$filename.wav
    done
done

# 
endian=""
encoding=""
ext="wav"
target_rate=16000
# Find out in which directory this script resides.
basedir=$(cd $(dirname $0); pwd)

# Clear the file containing all concatenated trimmed sound clips
echo -n > /tmp/all_trimmed.raw

SOX_RAW_SAMP_FMT="-traw -e signed-integer -b 16"
 . "${basedir}/filter_sounds.cfg"

# Loop through each subdirectory specified in SUBDIRS
for subdir in $SUBDIRS; do
  SOFTLINK_SOUNDS=""
  MAXMIZE_SOUNDS=""
  TRIM_SOUNDS=""
  . "${SRC_DIR}/$subdir/subdir.cfg"

  for clip in $MAXIMIZE_SOUNDS; do
    dest_clip="$DEST_DIR/$subdir/$clip"
    src_clip="$SRC_DIR/$subdir/$clip"
    [ ! -d $(dirname $dest_clip) ] && mkdir -p $(dirname $dest_clip)
    if [ -r "$src_clip.raw" -o -r "$src_clip.wav" ]; then
      echo "Maximizing $src_clip -> $dest_clip.$ext"
      $basedir/play_sound.sh -f$endian$encoding -r$target_rate \
                             -l$SILENCE_LEVEL -e "$EFFECT" "$src_clip" |
          sox ${SOX_RAW_SAMP_FMT} -r$target_rate - "$dest_clip.$ext"
    else
      warning "Missing sound clip: $src_clip"
    fi
done

  for clip in $TRIM_SOUNDS; do
    dest_clip="$DEST_DIR/$subdir/$clip"
    src_clip="$SRC_DIR/$subdir/$clip"
    [ ! -d $(dirname "$dest_clip") ] && mkdir -p $(dirname "$dest_clip")
    if [ -r "$src_clip.raw" -o -r "$src_clip.wav" ]; then
      echo "Trimming $src_clip -> $dest_clip.$ext"
      $basedir/play_sound.sh -tf$endian$encoding -r$target_rate \
                             -l$SILENCE_LEVEL -e "$EFFECT" "$src_clip" |
          sox ${SOX_RAW_SAMP_FMT} -r$target_rate - "$dest_clip.$ext"
      sox "$dest_clip.$ext" -r$target_rate ${SOX_RAW_SAMP_FMT} - >> /tmp/all_trimmed.raw 
    else
      warning "Missing sound clip: $src_clip"
    fi
  done

  for link_spec in $SOFTLINK_SOUNDS; do
    link=$(echo "$link_spec" | cut -d'|' -f1).$ext
    target=$(echo "$link_spec" | cut -d'|' -f2).$ext
    dest_clip="$DEST_DIR/$subdir/$link"
echo "link=$link target=$target dest_clip=$dest_clip"
    [ ! -d $(dirname "$dest_clip") ] && mkdir -p $(dirname "$dest_clip")
    if [ -r $(dirname "$dest_clip")/"$target" ]; then
      echo "Creating symlink $dest_clip -> $subdir/$target"
      rm -f "$dest_clip"
      ln -s "$target" "$dest_clip"
    else
      warning "Missing sound clip: $(dirname $dest_clip)/$target"
    fi
  done
done

if [ -d "${SRC_DIR}/events.d" ]; then
  echo "Copying the events.d directory to the target directory"
  cp -a "${SRC_DIR}/events.d" "${DEST_DIR}/"
fi

archive_file="${HOME_DIR}/svxlink-sounds.tar.bz2"
cd ${HOME_DIR}
echo "Creating archive ${archive_file}..."
rm -f ${DESTINATION}/*.bz2
tar cjf ${archive_file} ${DESTINATION}
mv $archive_file ${DESTINATION}
shopt -u nullglob
